Sagar Laud
Collaborators: Patrick Connor, Piero Cappelleti, Peter Aquila, Tim Kerr

1)
	a) This does make sense.  This is true.  If P = NP, then all NP problems are solveable in polynomial time.
	b) This makes sense. This is true. As P is a subset of NP, if an algorithm is in P, it is also in NP.
	c) This is a little ambiguous and doesn't really make sense.  When we say NP is polynomial time, are we saying that it can be solved or verified in polynomial time?  This isn't a well formed statement because saying NP is polynomial time is incredibly ambiguous.  We do not know if this means that problems in NP are solveable in polynomial time, verifiable in polynomial time (this is true of NP but we do not know if this is specified), or both.  We simply do not have enough information.  If we say that this statement means that the a problem that is in NP is solveable in polynomial time, then this is true. If we can solve NP problems in polynomial time, then there is no difference between P and NP and P = NP.  However, since this statement is rather ambiguous and does not make sense, let us avoid making assumptions and leave it at that. 
	d) This makes sense.  However, we do not know this for sure.  We do not know if P = NP or if P =/= NP.  If P = NP then it can be solved in polynomial time, if P =/= NP, then it cannot be solved in polynomial time.  However as we do not know if P does or does not equal NP, this will remain unknown even though it is a well formed statement.
	e) This makes sense but is still slightly ambiguous (which causes it to not really make sense).  Does this mean that we can verify in polynomial time or solve in polynomial time?  If it is the first one, this is definitely false.  If both problems are in NP (which NP-Complete problems are), there are polynomial time verifiers for both.  If we assume that we are being asked if there is a polynomial time solution in regards to finding a solution for the problem, then again this is not true.  If there exists a polynomial time algorithm for HAM-CYCLE, then there must also exist a polynomial time algorithm for 3SAT.  Both of these problems are NP-Complete.  Because of the way that reductions have worked out, if we solve one NP-complete problem in polynomial time, there exists a polynomial time solution for all NP-Complete problems.  If we are not allowed to make any assumptions and have to take the statement at face value, then this statement doesn't make sense.
	d) This makes sense.  This is false.  3-SAT is NP-Complete, however it is not for the reason described.  3-SAT is NP-Complete because it is in NP (can be verified in polynomial time) and is NP-Hard (atleast as hard as every other problem in NP).  This is what makes it NP-Complete.

2)
	34.5-1:
	We wish to show that if we have two graphs, G1 and G2, that determining if G1 is isomorphic to a subgraph of G2 is NP-Complete.  Let us start by explaining that this can be verified in polynomial time.  If we are given a graph, and a subgraph to verify, we can clearly determine if these two are isomorphic in polynomial time.  We will check that each vertex is mapped to by every other vertex.  We will also verify that an edge exists between all vertices and that the number of vertices = k.  Therefore, we have shown that this algorithm is in NP.  Let us now show that the Check algorithm is NP-Hard.  We will use this by solving the Clique problem.  If we call Clique(G, k), we can simply generate a complete graph with k vertices and determine if this graph is isomorphic to a subgraph of G.  So, after we generate this graph, let us call IsomorphismCheck(complete-graph-with-k-vertices, G).  If this algorithm succeeds, then Clique succeeds.  If it fails, then Clique fails as well.  This shows that IsomorphismCheck is NP-Hard.  As we have proven that IsomorphismCheck is NP and NP-Hard, we have shown that it is NP-Complete.